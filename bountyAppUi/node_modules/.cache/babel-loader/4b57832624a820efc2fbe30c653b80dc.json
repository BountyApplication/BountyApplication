{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Isaja\\\\my-app\\\\bountyAppUi\\\\src\\\\bounty\\\\util\\\\UserSelect.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getUsers } from './Database';\nimport { Col, Collapse, Form } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst debug = true;\nconst NameType = {\n  LASTNAME: false,\n  FIRSTNAME: true\n};\n\nfunction UserSelect(_ref) {\n  _s();\n\n  let {\n    title,\n    runCallback,\n    resetCallback,\n    setResetCallback,\n    useReset,\n    hideReset,\n    useSubmit,\n    hideSubmit,\n    resetOnSubmit\n  } = _ref;\n  // vars\n  const [users, setUsers] = useState(getUsers());\n  const [userFirstname, setUserFirstname] = useState(\"\");\n  const [userLastname, setUserLastname] = useState(\"\"); // temp var for easier access\n\n  const hasFirstname = userFirstname !== \"\";\n  const hasLastname = userLastname !== \"\";\n  const filteredUsers = getFilteredUsers(); // set callback on beginning\n\n  useEffect(() => {\n    if (setResetCallback) setResetCallback(() => reset);\n  }, []); // if username input changes, checks for autocomplete or run (if complete)\n\n  useEffect(() => {\n    if (hasFirstname && hasLastname) return run();\n    checkAutoComplete();\n  }, [userFirstname, userLastname]); // filters for current selection (firstname or lastname)\n\n  function getFilteredUsers() {\n    return users.filter(_ref2 => {\n      let {\n        lastname,\n        firstname\n      } = _ref2;\n      return (!hasFirstname || firstname === userFirstname) && (!hasLastname || lastname === userLastname);\n    });\n  } // filters for first user with matching name (no dupplicates)\n\n\n  function getUniqueUsers(isFirstname) {\n    return filteredUsers.filter(_ref3 => {\n      let {\n        id,\n        firstname,\n        lastname\n      } = _ref3;\n      return findUser(isFirstname, isFirstname ? firstname : lastname).id === id;\n    });\n  } // sortes user selection alphabetically\n\n\n  function getSortedUsers(isFirstname) {\n    return getUniqueUsers(isFirstname).sort((user1, user2) => compareNames(isFirstname ? user1.firstname : user1.lastname, isFirstname ? user2.firstname : user2.lastname));\n  } // finds first user with matching name\n\n\n  function findUser(isFirstname, name) {\n    return filteredUsers.find(_ref4 => {\n      let {\n        firstname,\n        lastname\n      } = _ref4;\n      return (isFirstname ? firstname : lastname) === name;\n    });\n  } // compares alphabetic order of two names\n\n\n  function compareNames(name1, name2) {\n    return name1.toLowerCase().localeCompare(name2.toLowerCase());\n  }\n\n  function updateName(isFirstname, name) {\n    // resets if name selection deleted\n    if (name === \"\") return reset();\n    if (isFirstname) setUserFirstname(name);else setUserLastname(name);\n  }\n\n  function checkAutoComplete() {\n    // returns if autocomplete not possible\n    if (filteredUsers.length > 1) return;\n    if (!hasFirstname && !hasLastname) return;\n    if (!hasFirstname) setUserFirstname(findUser(NameType.LASTNAME, userLastname).firstname);else setUserLastname(findUser(NameType.FIRSTNAME, userFirstname).lastname);\n  } // executed when selection complete\n\n\n  function run() {\n    if (debug) console.log(`${userFirstname} ${userLastname}`); // auto submit if no submit button\n\n    if (!useSubmit) submit();\n  }\n\n  function submit() {\n    // checks if result valid\n    if (getFilteredUsers().length !== 1) {\n      console.log(`Error: user selection ambiguous`);\n      window.alert(`Error: user selection ambiguous`);\n      return;\n    }\n\n    if (runCallback) runCallback(getFilteredUsers()[0]);\n    if (resetOnSubmit) reset();\n  }\n\n  function reset() {\n    setUserFirstname(\"\");\n    setUserLastname(\"\");\n    if (resetCallback) resetCallback();\n  }\n\n  function nameSelectUi(isFirstname) {\n    let userName = isFirstname ? userFirstname : userLastname;\n    return /*#__PURE__*/_jsxDEV(Form.Group, {\n      className: \"mb-3\",\n      controlId: isFirstname ? \"firstname\" : \"lastname\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: isFirstname ? \"Vorname\" : \"Nachname\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n        value: userName,\n        onChange: event => updateName(isFirstname, event.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: userName !== \"\" ? \"Auswahl löschen\" : `${isFirstname ? \"Vorname\" : \"Nachname\"} auswählen`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this), getSortedUsers(isFirstname).map(_ref5 => {\n          let {\n            id,\n            firstname,\n            lastname\n          } = _ref5;\n          let name = isFirstname ? firstname : lastname;\n          return /*#__PURE__*/_jsxDEV(\"option\", {\n            value: name,\n            children: name\n          }, id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 32\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"rubric\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title\",\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      children: [nameSelectUi(NameType.FIRSTNAME), nameSelectUi(NameType.LASTNAME), /*#__PURE__*/_jsxDEV(Collapse, {\n        in: useReset && (!hideReset || hasFirstname || hasLastname),\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          className: \"wrapper\",\n          onClick: reset,\n          children: \"reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n        in: useSubmit && (!hideSubmit || filteredUsers.length === 1),\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          className: \"wrapper\",\n          onClick: submit,\n          children: \"submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n}\n\n_s(UserSelect, \"UiFLX2g40NggDjCOQ7u07ECzcoY=\");\n\n_c = UserSelect;\nUserSelect.prototype = {\n  title: PropTypes.string,\n  // callbacks\n  runCallback: PropTypes.func,\n  resetCallback: PropTypes.func,\n  setResetCallback: PropTypes.func,\n  // settings\n  useReset: PropTypes.bool,\n  hideReset: PropTypes.bool,\n  useSubmit: PropTypes.bool,\n  hideSubmit: PropTypes.bool,\n  resetOnSubmit: PropTypes.bool\n};\nUserSelect.defaultProps = {\n  title: \"Suchen\",\n  useReset: false,\n  useSubmit: false,\n  hideReset: false,\n  hideSubmit: false,\n  resetOnSubmit: false\n};\nexport default UserSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserSelect\");","map":{"version":3,"sources":["C:/Users/Isaja/my-app/bountyAppUi/src/bounty/util/UserSelect.js"],"names":["React","useState","useEffect","PropTypes","getUsers","Col","Collapse","Form","debug","NameType","LASTNAME","FIRSTNAME","UserSelect","title","runCallback","resetCallback","setResetCallback","useReset","hideReset","useSubmit","hideSubmit","resetOnSubmit","users","setUsers","userFirstname","setUserFirstname","userLastname","setUserLastname","hasFirstname","hasLastname","filteredUsers","getFilteredUsers","reset","run","checkAutoComplete","filter","lastname","firstname","getUniqueUsers","isFirstname","id","findUser","getSortedUsers","sort","user1","user2","compareNames","name","find","name1","name2","toLowerCase","localeCompare","updateName","length","console","log","submit","window","alert","nameSelectUi","userName","event","target","value","map","prototype","string","func","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { getUsers } from './Database';\r\nimport { Col, Collapse, Form } from 'react-bootstrap';\r\n\r\nconst debug = true;\r\n\r\nconst NameType = {\r\n    LASTNAME: false,\r\n    FIRSTNAME: true,\r\n};\r\n\r\nfunction UserSelect({title, runCallback, resetCallback, setResetCallback, useReset, hideReset, useSubmit, hideSubmit, resetOnSubmit}) {\r\n    // vars\r\n    const [users, setUsers] = useState(getUsers());\r\n    const [userFirstname, setUserFirstname] = useState(\"\");\r\n    const [userLastname, setUserLastname] = useState(\"\");\r\n\r\n    // temp var for easier access\r\n    const hasFirstname = userFirstname !== \"\";\r\n    const hasLastname = userLastname !== \"\";\r\n    const filteredUsers = getFilteredUsers();\r\n\r\n    // set callback on beginning\r\n    useEffect(() => {\r\n      if(setResetCallback) setResetCallback(()=>reset);\r\n    }, []);\r\n\r\n    // if username input changes, checks for autocomplete or run (if complete)\r\n    useEffect(() => {\r\n        if(hasFirstname && hasLastname) return run();\r\n        checkAutoComplete();\r\n    }, [userFirstname, userLastname]);\r\n\r\n    // filters for current selection (firstname or lastname)\r\n    function getFilteredUsers() {\r\n        return users.filter(({lastname, firstname}) => (!hasFirstname || firstname===userFirstname) && (!hasLastname || lastname===userLastname));\r\n    }\r\n\r\n    // filters for first user with matching name (no dupplicates)\r\n    function getUniqueUsers(isFirstname) {\r\n        return filteredUsers.filter(({id, firstname, lastname}) => findUser(isFirstname, isFirstname?firstname:lastname).id===id);\r\n    }\r\n\r\n    // sortes user selection alphabetically\r\n    function getSortedUsers(isFirstname) {\r\n        return getUniqueUsers(isFirstname).sort((user1, user2) => compareNames(isFirstname?user1.firstname:user1.lastname, isFirstname?user2.firstname:user2.lastname));\r\n    }\r\n\r\n    // finds first user with matching name\r\n    function findUser(isFirstname, name) {\r\n        return filteredUsers.find(({firstname, lastname}) => (isFirstname?firstname:lastname)===name);\r\n    }\r\n\r\n    // compares alphabetic order of two names\r\n    function compareNames(name1, name2) {\r\n        return name1.toLowerCase().localeCompare(name2.toLowerCase());\r\n    }\r\n\r\n    function updateName(isFirstname, name) {\r\n        // resets if name selection deleted\r\n        if(name === \"\") return reset();\r\n\r\n        if(isFirstname)\r\n            setUserFirstname(name);\r\n        else\r\n            setUserLastname(name);\r\n    }\r\n    \r\n    function checkAutoComplete() {\r\n        // returns if autocomplete not possible\r\n        if(filteredUsers.length > 1) return;\r\n        if(!hasFirstname && !hasLastname) return;\r\n\r\n        if(!hasFirstname)\r\n            setUserFirstname(findUser(NameType.LASTNAME, userLastname).firstname);\r\n        else\r\n            setUserLastname(findUser(NameType.FIRSTNAME, userFirstname).lastname);            \r\n    }\r\n\r\n    // executed when selection complete\r\n    function run() {\r\n        if(debug) console.log(`${userFirstname} ${userLastname}`);\r\n\r\n        // auto submit if no submit button\r\n        if(!useSubmit) submit();\r\n    }\r\n\r\n    function submit() {\r\n        // checks if result valid\r\n        if(getFilteredUsers().length!==1) {\r\n            console.log(`Error: user selection ambiguous`);\r\n            window.alert(`Error: user selection ambiguous`);\r\n            return;\r\n        }\r\n        \r\n        if(runCallback) runCallback(getFilteredUsers()[0]);\r\n        if(resetOnSubmit) reset();\r\n    }\r\n\r\n    function reset() {\r\n        setUserFirstname(\"\");\r\n        setUserLastname(\"\");\r\n        if(resetCallback) resetCallback();\r\n    }\r\n\r\n    function nameSelectUi(isFirstname) {\r\n        let userName = isFirstname?userFirstname:userLastname;\r\n        return(\r\n            <Form.Group className=\"mb-3\" controlId={isFirstname?\"firstname\":\"lastname\"}>\r\n                <Form.Label>{isFirstname?\"Vorname\":\"Nachname\"}</Form.Label>\r\n                <Form.Select value={userName} onChange={event => updateName(isFirstname, event.target.value)}>\r\n                    <option value=\"\">{userName!==\"\"?\"Auswahl löschen\":`${isFirstname?\"Vorname\":\"Nachname\"} auswählen`}</option>\r\n                    {getSortedUsers(isFirstname).map(({id, firstname, lastname}) => {\r\n                        let name=isFirstname?firstname:lastname;\r\n                        return <option key={id} value={name}>{name}</option>\r\n                    })}\r\n                </Form.Select>\r\n            </Form.Group>\r\n        );\r\n    }\r\n    \r\n    return(\r\n        <div className=\"rubric\">\r\n            <div className='title'>{title}</div>\r\n            <Form>\r\n                {nameSelectUi(NameType.FIRSTNAME)}\r\n                {nameSelectUi(NameType.LASTNAME)}\r\n                <Collapse in={useReset  && (!hideReset  || hasFirstname || hasLastname)}>\r\n                    <Button className='wrapper' onClick={reset}>{\"reset\"}</Button>\r\n                </Collapse>\r\n                <Collapse in={useSubmit && (!hideSubmit || filteredUsers.length===1)}>\r\n                    <Button className='wrapper' onClick={submit}>{\"submit\"}</Button>\r\n                </Collapse>\r\n            </Form>\r\n        </div>\r\n    );\r\n}\r\n\r\nUserSelect.prototype = {\r\n    title: PropTypes.string,\r\n\r\n    // callbacks\r\n    runCallback: PropTypes.func,\r\n    resetCallback: PropTypes.func,\r\n    setResetCallback: PropTypes.func,\r\n\r\n    // settings\r\n    useReset: PropTypes.bool,\r\n    hideReset: PropTypes.bool,\r\n    useSubmit: PropTypes.bool,\r\n    hideSubmit: PropTypes.bool,\r\n    resetOnSubmit: PropTypes.bool,    \r\n};\r\n\r\nUserSelect.defaultProps = {\r\n    title: \"Suchen\",\r\n\r\n    useReset: false,\r\n    useSubmit: false,\r\n\r\n    hideReset: false,\r\n    hideSubmit: false,\r\n\r\n    resetOnSubmit: false,\r\n};\r\n\r\nexport default UserSelect;"]},"metadata":{},"sourceType":"module"}