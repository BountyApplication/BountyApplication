{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Isaja\\\\my-app\\\\bountyAppUi\\\\src\\\\bounty\\\\util\\\\scanner.jsx\";\n// Html5QrcodePlugin.jsx\nimport { Html5QrcodeScanner } from \"html5-qrcode\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst qrcodeRegionId = \"html5qr-code-full-region\";\n\nclass Html5QrcodePlugin extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: qrcodeRegionId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 16\n    }, this);\n  }\n\n  componentWillUnmount() {\n    // TODO(mebjas): See if there is a better way to handle\n    //  promise in `componentWillUnmount`.\n    this.html5QrcodeScanner.clear().catch(error => {\n      console.error(\"Failed to clear html5QrcodeScanner. \", error);\n    });\n  }\n\n  componentDidMount() {\n    // Creates the configuration object for Html5QrcodeScanner.\n    function createConfig(props) {\n      var config = {};\n\n      if (props.fps) {\n        config.fps = props.fps;\n      }\n\n      if (props.qrbox) {\n        config.qrbox = props.qrbox;\n      }\n\n      if (props.aspectRatio) {\n        config.aspectRatio = props.aspectRatio;\n      }\n\n      if (props.disableFlip !== undefined) {\n        config.disableFlip = props.disableFlip;\n      }\n\n      return config;\n    }\n\n    var config = createConfig(this.props);\n    var verbose = this.props.verbose === true; // Suceess callback is required.\n\n    if (!this.props.qrCodeSuccessCallback) {\n      throw \"qrCodeSuccessCallback is required callback.\";\n    }\n\n    this.html5QrcodeScanner = new Html5QrcodeScanner(qrcodeRegionId, config, verbose);\n    this.html5QrcodeScanner.render(this.props.qrCodeSuccessCallback, this.props.qrCodeErrorCallback);\n  }\n\n}\n\n;\nexport default Html5QrcodePlugin;","map":{"version":3,"sources":["C:/Users/Isaja/my-app/bountyAppUi/src/bounty/util/scanner.jsx"],"names":["Html5QrcodeScanner","React","qrcodeRegionId","Html5QrcodePlugin","Component","render","componentWillUnmount","html5QrcodeScanner","clear","catch","error","console","componentDidMount","createConfig","props","config","fps","qrbox","aspectRatio","disableFlip","undefined","verbose","qrCodeSuccessCallback","qrCodeErrorCallback"],"mappings":";AACA;AAEA,SAASA,kBAAT,QAAmC,cAAnC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,cAAc,GAAG,0BAAvB;;AAEA,MAAMC,iBAAN,SAAgCF,KAAK,CAACG,SAAtC,CAAgD;AAC5CC,EAAAA,MAAM,GAAG;AACL,wBAAO;AAAK,MAAA,EAAE,EAAEH;AAAT;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAEDI,EAAAA,oBAAoB,GAAG;AACnB;AACA;AACA,SAAKC,kBAAL,CAAwBC,KAAxB,GAAgCC,KAAhC,CAAsCC,KAAK,IAAI;AAC3CC,MAAAA,OAAO,CAACD,KAAR,CAAc,sCAAd,EAAsDA,KAAtD;AACH,KAFD;AAGH;;AAEDE,EAAAA,iBAAiB,GAAG;AAChB;AACA,aAASC,YAAT,CAAsBC,KAAtB,EAA6B;AACzB,UAAIC,MAAM,GAAG,EAAb;;AACA,UAAID,KAAK,CAACE,GAAV,EAAe;AACfD,QAAAA,MAAM,CAACC,GAAP,GAAaF,KAAK,CAACE,GAAnB;AACC;;AACD,UAAIF,KAAK,CAACG,KAAV,EAAiB;AACjBF,QAAAA,MAAM,CAACE,KAAP,GAAeH,KAAK,CAACG,KAArB;AACC;;AACD,UAAIH,KAAK,CAACI,WAAV,EAAuB;AACvBH,QAAAA,MAAM,CAACG,WAAP,GAAqBJ,KAAK,CAACI,WAA3B;AACC;;AACD,UAAIJ,KAAK,CAACK,WAAN,KAAsBC,SAA1B,EAAqC;AACrCL,QAAAA,MAAM,CAACI,WAAP,GAAqBL,KAAK,CAACK,WAA3B;AACC;;AACD,aAAOJ,MAAP;AACH;;AAED,QAAIA,MAAM,GAAGF,YAAY,CAAC,KAAKC,KAAN,CAAzB;AACA,QAAIO,OAAO,GAAG,KAAKP,KAAL,CAAWO,OAAX,KAAuB,IAArC,CApBgB,CAsBhB;;AACA,QAAI,CAAE,KAAKP,KAAL,CAAWQ,qBAAjB,EAA0C;AACtC,YAAM,6CAAN;AACH;;AAED,SAAKf,kBAAL,GAA0B,IAAIP,kBAAJ,CACtBE,cADsB,EACNa,MADM,EACEM,OADF,CAA1B;AAEA,SAAKd,kBAAL,CAAwBF,MAAxB,CACI,KAAKS,KAAL,CAAWQ,qBADf,EAEI,KAAKR,KAAL,CAAWS,mBAFf;AAGH;;AA7C2C;;AA8C/C;AAED,eAAepB,iBAAf","sourcesContent":["\r\n// Html5QrcodePlugin.jsx\r\n\r\nimport { Html5QrcodeScanner } from \"html5-qrcode\";\r\nimport React from 'react';\r\n\r\nconst qrcodeRegionId = \"html5qr-code-full-region\";\r\n\r\nclass Html5QrcodePlugin extends React.Component {\r\n    render() {\r\n        return <div id={qrcodeRegionId} />;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // TODO(mebjas): See if there is a better way to handle\r\n        //  promise in `componentWillUnmount`.\r\n        this.html5QrcodeScanner.clear().catch(error => {\r\n            console.error(\"Failed to clear html5QrcodeScanner. \", error);\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Creates the configuration object for Html5QrcodeScanner.\r\n        function createConfig(props) {\r\n            var config = {};\r\n            if (props.fps) {\r\n            config.fps = props.fps;\r\n            }\r\n            if (props.qrbox) {\r\n            config.qrbox = props.qrbox;\r\n            }\r\n            if (props.aspectRatio) {\r\n            config.aspectRatio = props.aspectRatio;\r\n            }\r\n            if (props.disableFlip !== undefined) {\r\n            config.disableFlip = props.disableFlip;\r\n            }\r\n            return config;\r\n        }\r\n\r\n        var config = createConfig(this.props);\r\n        var verbose = this.props.verbose === true;\r\n\r\n        // Suceess callback is required.\r\n        if (!(this.props.qrCodeSuccessCallback )) {\r\n            throw \"qrCodeSuccessCallback is required callback.\";\r\n        }\r\n\r\n        this.html5QrcodeScanner = new Html5QrcodeScanner(\r\n            qrcodeRegionId, config, verbose);\r\n        this.html5QrcodeScanner.render(\r\n            this.props.qrCodeSuccessCallback,\r\n            this.props.qrCodeErrorCallback);\r\n    }\r\n};\r\n\r\nexport default Html5QrcodePlugin;"]},"metadata":{},"sourceType":"module"}