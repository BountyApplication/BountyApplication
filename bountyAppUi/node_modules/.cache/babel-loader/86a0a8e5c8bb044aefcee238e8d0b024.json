{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Isaja\\\\my-app\\\\bountyAppUi\\\\src\\\\bounty\\\\util\\\\NumberInput.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NumberInput(props) {\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    className: \"wrapper\",\n    type: \"number\",\n    value: !props.value ? \" \" : props.value.toString(),\n    onChange: event => {\n      let value = parseFloat(event.target.value);\n      props.setValue(isNaN(value) ? null : Math.floor(value * 100) / 100);\n    },\n    onKeyPress: event => {\n      if (!/[0-9|.]/.test(event.key)) event.preventDefault();\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 9\n  }, this);\n}\n_c = NumberInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"NumberInput\");","map":{"version":3,"sources":["C:/Users/Isaja/my-app/bountyAppUi/src/bounty/util/NumberInput.js"],"names":["React","NumberInput","props","value","toString","event","parseFloat","target","setValue","isNaN","Math","floor","test","key","preventDefault"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AACvC,sBACI;AAAO,IAAA,SAAS,EAAC,SAAjB;AAA2B,IAAA,IAAI,EAAC,QAAhC;AACI,IAAA,KAAK,EAAE,CAACA,KAAK,CAACC,KAAP,GAAa,GAAb,GAAiBD,KAAK,CAACC,KAAN,CAAYC,QAAZ,EAD5B;AAEI,IAAA,QAAQ,EAAEC,KAAK,IAAE;AACb,UAAIF,KAAK,GAAGG,UAAU,CAACD,KAAK,CAACE,MAAN,CAAaJ,KAAd,CAAtB;AACAD,MAAAA,KAAK,CAACM,QAAN,CAAeC,KAAK,CAACN,KAAD,CAAL,GAAa,IAAb,GAAkBO,IAAI,CAACC,KAAL,CAAWR,KAAK,GAAC,GAAjB,IAAsB,GAAvD;AACH,KALL;AAMI,IAAA,UAAU,EAAGE,KAAD,IAAS;AAAE,UAAG,CAAC,UAAUO,IAAV,CAAeP,KAAK,CAACQ,GAArB,CAAJ,EAA+BR,KAAK,CAACS,cAAN;AAAyB;AANnF;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH;KAXuBb,W","sourcesContent":["import React from 'react';\r\n\r\nexport default function NumberInput(props) {\r\n    return(\r\n        <input className='wrapper' type=\"number\"\r\n            value={!props.value?\" \":props.value.toString()}\r\n            onChange={event=>{\r\n                let value = parseFloat(event.target.value);\r\n                props.setValue(isNaN(value)?null:Math.floor(value*100)/100);\r\n            }}\r\n            onKeyPress={(event)=>{ if(!/[0-9|.]/.test(event.key)) event.preventDefault(); }}\r\n        />\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}